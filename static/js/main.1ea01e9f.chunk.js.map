{"version":3,"sources":["constants.js","logics/calculate.js","components/Button.jsx","components/Calculator.jsx","App.js","index.js"],"names":["MULTIPLICATION","String","fromCharCode","DIVISION","contents","operators","numberArray","operatorStack","calculateTillNow","length","num2","pop","num1","result","Error","push","calculate","state","input","path","number","oper","substring","newNumber","Number","isInteger","isNumber","alert","includes","isOperator","last","isLowerPrecedence","newPath","Button","cols","handler","className","map","data","idx","onClick","key","toString","Calculator","useState","info","setInfo","onClickButton","clicked","newState","parseInt","toLocaleString","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1ea01e9f.chunk.js","sourcesContent":["export const PLUS = '+';\r\nexport const MINUS = '-';\r\nexport const MULTIPLICATION = String.fromCharCode('0x00D7');\r\nexport const DIVISION = String.fromCharCode('0x00F7');\r\n\r\nexport const contents = [\r\n  ['1','2','3',PLUS],\r\n  ['4','5','6',MINUS],\r\n  ['7','8','9',MULTIPLICATION],\r\n  ['','0','',DIVISION],\r\n  ['C','','←','=']\r\n];\r\nexport const operators = [PLUS, MINUS, MULTIPLICATION, DIVISION];","import { PLUS, MINUS, MULTIPLICATION, DIVISION } from '../constants';\r\n\r\nconst operators = [PLUS, MINUS, MULTIPLICATION, DIVISION];\r\nlet numberArray = [];\r\nlet operatorStack = [];\r\n\r\nconst isLowerPrecedence = (oper) => {\r\n  if(operatorStack.length === 0) return false;\r\n  const last = operatorStack[operatorStack.length-1];\r\n  if(oper === MULTIPLICATION && (last === MINUS || last === PLUS)) return false;\r\n  if(oper === DIVISION && (last === MINUS || last === PLUS)) return false;\r\n  return true;\r\n};\r\n\r\nconst calculateTillNow = () => {\r\n  while(operatorStack.length) {\r\n    const num2 = numberArray.pop()*1;\r\n    const num1 = numberArray.pop()*1;\r\n    const oper = operatorStack.pop();\r\n    let result = 0;\r\n    switch (oper) {\r\n      case PLUS: result = num1 + num2; break;\r\n      case MINUS: result = num1 - num2; break;\r\n      case MULTIPLICATION: result = num1 * num2; break;\r\n      case DIVISION: result = num1 / num2; break;\r\n      default: throw new Error('Invalid Operator!');\r\n    }\r\n    numberArray.push(result);\r\n  }\r\n};\r\n\r\nconst isOperator = (input) => operators.includes(input);\r\nconst isNumber = (input) => Number.isInteger(input*1);\r\n\r\nconst calculate = (state, input) => {\r\n  const { path, number, oper } = state;\r\n  if(input === 'C') {\r\n    numberArray = [];\r\n    operatorStack = [];\r\n    return {\r\n      path: '',\r\n      number: '0',\r\n      oper: null,\r\n    };\r\n  }\r\n  if(input === '←') {\r\n    if(oper) return state;\r\n    if(number) {\r\n      if(number.length === 1) {\r\n        return {\r\n          ...state,\r\n          number: '0',\r\n        };\r\n      }\r\n      return {\r\n        ...state,\r\n        number: number.substring(0, number.length-1),\r\n      };\r\n    }\r\n    return state;\r\n  }\r\n  if(input === '=') {\r\n    if(number) {\r\n      numberArray.push(number);\r\n      calculateTillNow();\r\n      const newNumber = numberArray[0] + '';\r\n      numberArray = [];\r\n      return {\r\n        path: path + number + input,\r\n        number: newNumber,\r\n        oper: null,\r\n      };\r\n    }\r\n    return state;\r\n  }\r\n  if(isNumber(input)) {\r\n    if(path[path.length-1] === '=') {\r\n      return {\r\n        ...state,\r\n        path: '',\r\n        number: input,\r\n      }\r\n    }\r\n    if(oper) {\r\n      if(oper === DIVISION && input === '0') {\r\n        alert('Cannot divide by 0');\r\n        return {\r\n          path: '',\r\n          number: '0',\r\n          oper: null,\r\n        };\r\n      }\r\n      return {\r\n        ...state,\r\n        number: input,\r\n        oper: null,\r\n      };\r\n    }\r\n    if(number) {\r\n      const newNumber = (number === '0' ? input : number + input);\r\n      return {\r\n        ...state,\r\n        number: newNumber,\r\n      };\r\n    }\r\n    return state;\r\n  }\r\n  if(isOperator(input)) {\r\n    if(number) {\r\n      numberArray.push(number);\r\n      if(isLowerPrecedence(input)) {\r\n        calculateTillNow();\r\n      }\r\n      operatorStack.push(input);\r\n      const newPath = (path[path.length-1] === '=' ? number + input : path + number + input);\r\n      return {\r\n        ...state,\r\n        path: newPath,\r\n        oper: input,\r\n      };\r\n    }\r\n    return state;\r\n  }\r\n};\r\n\r\nexport default calculate;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Button = ({ cols, handler }) => {\r\n\r\n  return (\r\n    <div className=\"calculator__panel-row\">\r\n      {cols.map((data, idx) => \r\n        <div \r\n        className=\"calculator__panel-button\" \r\n        onClick={() => handler(data)} \r\n        key={cols.toString() + idx}>\r\n          {data}\r\n        </div>)}\r\n    </div>\r\n  )\r\n};\r\n\r\nButton.propTypes = {\r\n  cols: PropTypes.array.isRequired,\r\n  handler: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Button;","import React, { useState } from 'react';\r\nimport '../styles/Calculator.scss';\r\nimport { contents } from '../constants';\r\nimport calculate from '../logics/calculate';\r\nimport Button from './Button';\r\n\r\nconst Calculator = () => {\r\n  const [info, setInfo] = useState({\r\n    path: '',\r\n    number: '0',\r\n    oper: null,\r\n  });\r\n\r\n  const onClickButton = (clicked) => {\r\n    const newState = calculate(info, clicked);\r\n    setInfo(newState);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"calculator\">\r\n        <div className=\"calculator__path\">\r\n          {info.path}\r\n        </div>\r\n        <div className=\"calculator__number\">\r\n          {parseInt(info.number).toLocaleString()}\r\n        </div>\r\n        <div className=\"calculator__panel\">\r\n          {contents.map((cols) => \r\n            <Button key={cols.toString()} cols={cols} handler={onClickButton} />)}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Calculator;","import React from 'react';\nimport Calculator from './components/Calculator';\nimport 'reset-css';\n\nconst App = () => {\n  return (\n    <Calculator />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}